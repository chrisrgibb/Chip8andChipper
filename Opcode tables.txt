Opcode table[edit]
CHIP-8 has 35 opcodes, which are all two bytes long. The most significant byte is stored first. The opcodes are listed below, in hexadecimal and with the following symbols:

NNN: address
NN: 8-bit constant
N: 4-bit constant
X and Y: 4-bit register identifier
		Opcode	Explanation
		0NNN	Calls RCA 1802 program at address NNN. 
done 	00E0	Clears the screen.
done	00EE	Returns from a subroutine. 
done	1NNN	Jumps to address NNN.    
done	2NNN	Calls subroutine at NNN.
done 	3XNN	Skips the next instruction if VX equals NN.
done	4XNN	Skips the next instruction if VX doesn't equal NN.
done	5XY0	Skips the next instruction if VX equals VY.
done	6XNN	Sets VX to NN.
done	7XNN	Adds NN to VX.
done	8XY0	Sets VX to the value of VY.
done	8XY1	Sets VX to VX or VY.
done	8XY2	Sets VX to VX and VY.
done	8XY3	Sets VX to VX xor VY.
done	8XY4	Adds VY to VX. VF is set to 1 when there's a carry, and to 0 when there 					isn't.
done	8XY5	VY is subtracted from VX. VF is set to 0 when there's a borrow, and 1 when 					there isn't.
done	8XY6	Shifts VX right by one. VF is set to the value of the least significant bit 				of VX before the shift.[2]
done	8XY7	Sets VX to VY minus VX. VF is set to 0 when there's a borrow, and 1 when 					there isn't here.
done	8XYE	Shifts VX left by one. VF is set to the value of the most significant bit of VX 			before the shift.[2]
done	9XY0	Skips the next instruction if VX doesn't equal VY.
done	ANNN	Sets I to the address NNN.
done	BNNN	Jumps to the address NNN plus V0.
done	CXNN	Sets VX to a random number and NN.
done	DXYN	Draws a sprite at coordinate (VX, VY) that has a width of 8 pixels and a height of 
		N pixels. Each row of 8 pixels is read as bit-coded (with the most significant bit of each byte displayed on the left) starting from memory location I; I value doesn't change after the execution of chip instruction. As described above, VF is set to 1 if any screen pixels are flipped from set to unset when the sprite is drawn, and to 0 if that doesn't happen.
done	EX9E	Skips the next instruction if the key stored in VX is pressed.
done	EXA1	Skips the next instruction if the key stored in VX isn't pressed.
done	FX07	Sets VX to the value of the delay timer.
		FX0A	A key press is awaited, and then stored in VX.
done	FX15	Sets the delay timer to VX.
done	FX18	Sets the sound timer to VX.
done	FX1E	Adds VX to I.[3]
done	FX29	Sets I to the location of the sprite for the character in VX. Characters 0-F (in hexadecimal) are represented by a 4x5 font.
done	FX33	Stores the Binary-coded decimal representation of VX, with the most 								significant of three digits at the address in I, the middle digit at I plus 1, and 					the least significant digit at I plus 2. (In other words, take the decimal 							representation of VX, place the hundreds digit in memory at location in I, the tens 				digit at location I+1, and the ones digit at location I+2.)
		FX55	Stores V0 to VX in memory starting at address I.[4]
done	FX65	Fills V0 to VX with values from memory starting at address I.[4]